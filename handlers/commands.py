import logging
from aiogram import Router, types, Bot
from aiogram.filters import Command, ChatMemberUpdatedFilter
from aiogram.types import ChatMemberUpdated, Message
from aiogram.enums import ChatMemberStatus
from config import BOT_USERNAME, GROUP_WELCOME_MESSAGE
from utils.logger import logger

router = Router()

@router.message(Command(commands=["start"]))
async def send_welcome(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {message.chat.id}")
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
        f"–Ø - A-Vision, –±–æ—Ç –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –º–µ–¥–∏–∞. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

@router.message(Command(commands=["stop"]))
async def send_goodbye(message: Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {user_id} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {message.chat.id}")
    await message.answer(
        "–ë–æ—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
    )

@router.message(Command(commands=["help"]))
async def cmd_help(message: types.Message):
    try:
        help_text = [
            f"ü§ñ {BOT_USERNAME} - –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –ª—é–¥—è–º —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏ –∑—Ä–µ–Ω–∏—è",
            "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
            "/start - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞",
            "/stop - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞",
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "\n–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:",
            "1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start",
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –º–µ–¥–∏–∞-—Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ)",
            "3. –ë–æ—Ç –æ–ø–∏—à–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"
        ]
        
        await message.answer("\n".join(help_text))
        
        logger.info(f"–ü–æ–º–æ—â—å –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –≤ —á–∞—Ç–µ {message.chat.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–º–æ—â–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

@router.my_chat_member()
async def on_bot_promote(event: ChatMemberUpdated, bot: Bot):
    logger.info(
        f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –≤ —á–∞—Ç–µ {event.chat.id}. "
        f"–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å: {event.old_chat_member.status.value}, "
        f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {event.new_chat_member.status.value}"
    )

    if event.new_chat_member.status == ChatMemberStatus.ADMINISTRATOR and event.new_chat_member.user.id == bot.id:
        try:
            await bot.send_message(event.chat.id, GROUP_WELCOME_MESSAGE, parse_mode="Markdown")
            logger.info(f"–ë–æ—Ç –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {event.chat.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –±–æ—Ç–∞ –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {event.chat.id}: {e}")